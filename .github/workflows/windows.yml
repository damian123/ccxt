name: windows

on: 
  push:
  pull_request:
    types: [ opened, synchronize, closed, ready_for_review, review_requested ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: ${{matrix.os}}, ${{matrix.std}}, ${{matrix.build_type}}, ${{matrix.platform}}
    runs-on: ${{matrix.os}}    
    strategy:
      matrix:
        os: [windows-latest]
        platform: [x64]
        build_type: [Debug, Release]
        # kind: [static, shared]
        std: [20]
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    env:
      boost_path: "${{ github.workspace }}/../boost"
    # Define the vcpkg's triplet 
    # you want to enforce, otherwise the default one 
    # for the hosting system will be automatically
    # choosen (x64 is the default on all platforms, 
    # e.g. x64-windows).
    #  VCPKG_DEFAULT_TRIPLET: ${{ x64-windows-static-release }} 
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup devcmd
      uses: ilammy/msvc-dev-cmd@v1

    - name: Get latest CMake
      uses: lukka/get-cmake@latest
    
    - name: Install build tools
      run: 
        choco install ninja

    # use the preinstalled vcpkg from image
    # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#package-management
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11      
      with:
          vcpkgJsonGlob: 'vcpkg.json'

    # - name: Install dependencies from vcpkg
    #   run: |
    #     # tell vcpkg to only build Release variants of the dependencies
    #     New-Item `
    #       -Path "${{ github.workspace }}" `
    #       -Name "triplets_overlay" `
    #       -ItemType Directory
    #     Copy-Item `
    #       "${{ env.RUNVCPKG_VCPKG_ROOT }}/triplets/x64-windows-static.cmake" `
    #       "${{ github.workspace }}/triplets_overlay/x64-windows-static-release.cmake"
    #     Add-Content `
    #       "${{ github.workspace }}/triplets_overlay/x64-windows-static-release.cmake" `
    #       -Value "set(VCPKG_BUILD_TYPE release)"
    #     # clear buildtrees after each package installation to reduce disk space requirements
    #     $packages = `
    #       "openssl:x64-windows-static-release",
    #       "fmt:x64-windows-static-release",
    #       "spdlog:x64-windows-static-release",
    #       "nlohmann-json:x64-windows-static-release",
    #       "date:x64-windows-static-release"
    #     ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe upgrade `
    #       --overlay-triplets="${{ github.workspace }}/triplets_overlay" `
    #       --no-dry-run
    #     ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe install `
    #       --overlay-triplets="${{ github.workspace }}/triplets_overlay" `
    #       --clean-after-build `
    #       $packages

    - name: Install boost
      run: |
        aria2c `
            "https://boostorg.jfrog.io/artifactory/main/release/1.81.0/binaries/boost_1_81_0-msvc-14.3-64.exe" `
           -d "${{ runner.temp }}" `
           -o "boost_1_81_0-msvc-14.3-64.exe"
        "${{ runner.temp }}/boost_1_81_0-msvc-14.3-64.exe" /dir="${{ env.boost_path }}" /VERYSILENT          
      shell: cmd

    - name: Build ccxt
      run: |
        cmake `
          -B build `
          -G "Ninja" `
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} `
          -DCMAKE_CXX_FLAGS="/WX" `
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
          -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
          -DBOOST_ROOT="${{ env.boost_path }}" `
          -DBUILD_SHARED_LIBS=OFF `
          -DMSVC_RUNTIME_DYNAMIC=OFF `
          -DVCPKG_TARGET_TRIPLET=x64-windows-static-release `
          -DVERBOSE_CONFIGURE=ON `            
        cmake --build build --config Debug
        cmake --build build --config Release


    # - name: Create Build Environment
    #   run: |
    #     ${{matrix.install}}
    #     vcpkg.exe install fmt spdlog nlohmann-json date openssl boost --triplet x64-windows-static        
    #     cmake -E make_directory ${{runner.workspace}}/build

    # - name: Configure
    #   working-directory: ${{runner.workspace}}/build
    #   env:
    #     CXX: ${{matrix.cxx}}
    #     CXXFLAGS: ${{matrix.cxxflags}}
    #   run: |
    #     cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} ${{matrix.shared}} \
    #           -DCMAKE_CXX_STANDARD=${{matrix.std}} \
    #           -GNinja \
    #           $GITHUB_WORKSPACE

    # - name: Build
    #   working-directory: ${{runner.workspace}}/build
    #   run: |        
    #     cmake --build . --config ${{matrix.build_type}}

    # - name: Test
    #   working-directory: ${{runner.workspace}}/build
    #   run: |
    #     cpp/test/unit/base/test-base
    #     cpp/test/unit/tests
